
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compilation.syntax;

import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser_constructor extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser_constructor() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser_constructor(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser_constructor(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\065\000\002\002\004\000\002\002\004\000\002\003" +
    "\023\000\002\005\002\000\002\005\004\000\002\004\003" +
    "\000\002\022\013\000\002\022\006\000\002\022\005\000" +
    "\002\022\011\000\002\022\007\000\002\022\011\000\002" +
    "\006\010\000\002\023\003\000\002\023\003\000\002\023" +
    "\005\000\002\023\005\000\002\023\006\000\002\023\005" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\004\000\002\023\010\000\002\023\003\000\002" +
    "\023\006\000\002\023\004\000\002\023\005\000\002\023" +
    "\007\000\002\023\006\000\002\007\002\000\002\007\004" +
    "\000\002\012\002\000\002\012\004\000\002\012\004\000" +
    "\002\010\002\000\002\010\004\000\002\010\004\000\002" +
    "\014\005\000\002\011\016\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\005\000\002\020\002" +
    "\000\002\020\003\000\002\021\003\000\002\021\005\000" +
    "\002\015\004\000\002\016\002\000\002\016\003\000\002" +
    "\017\003\000\002\017\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\215\000\004\006\005\001\002\000\004\002\217\001" +
    "\002\000\004\057\013\001\002\000\006\002\ufffe\006\ufffe" +
    "\001\002\000\006\002\001\006\011\001\002\000\006\002" +
    "\ufffd\006\ufffd\001\002\000\004\057\013\001\002\000\006" +
    "\021\uffe3\027\014\001\002\000\040\004\ufffc\005\ufffc\017" +
    "\ufffc\020\ufffc\021\ufffc\023\ufffc\024\ufffc\027\ufffc\035\ufffc" +
    "\036\ufffc\037\ufffc\040\ufffc\042\ufffc\043\ufffc\044\ufffc\001" +
    "\002\000\004\057\013\001\002\000\004\021\016\001\002" +
    "\000\014\012\uffde\022\uffde\025\uffde\031\uffde\057\uffde\001" +
    "\002\000\014\012\024\022\022\025\025\031\027\057\023" +
    "\001\002\000\014\012\uffdd\022\uffdd\025\uffdd\031\uffdd\057" +
    "\uffdd\001\002\000\004\057\013\001\002\000\006\002\ufff5" +
    "\006\ufff5\001\002\000\004\057\uffd9\001\002\000\010\025" +
    "\025\031\027\057\023\001\002\000\004\057\uffd7\001\002" +
    "\000\014\012\uffdc\022\uffdc\025\uffdc\031\uffdc\057\uffdc\001" +
    "\002\000\006\004\030\057\uffd8\001\002\000\004\005\031" +
    "\001\002\000\004\057\uffd6\001\002\000\004\057\013\001" +
    "\002\000\004\023\034\001\002\000\012\024\uffd0\025\025" +
    "\031\027\057\023\001\002\000\006\024\uffcf\044\172\001" +
    "\002\000\004\057\013\001\002\000\006\024\uffce\044\uffce" +
    "\001\002\000\004\024\041\001\002\000\004\021\042\001" +
    "\002\000\022\015\uffe1\021\uffe1\025\uffe1\030\uffe1\031\uffe1" +
    "\033\uffe1\034\uffe1\057\uffe1\001\002\000\022\015\044\021" +
    "\046\025\025\030\053\031\027\033\054\034\045\057\047" +
    "\001\002\000\004\017\161\001\002\000\004\023\155\001" +
    "\002\000\022\015\uffe1\021\uffe1\022\uffe1\025\uffe1\030\uffe1" +
    "\031\uffe1\034\uffe1\057\uffe1\001\002\000\010\004\ufffc\036" +
    "\ufffc\057\uffd9\001\002\000\024\015\uffe0\021\uffe0\022\uffe0" +
    "\025\uffe0\030\uffe0\031\uffe0\033\uffe0\034\uffe0\057\uffe0\001" +
    "\002\000\024\015\uffdf\021\uffdf\022\uffdf\025\uffdf\030\uffdf" +
    "\031\uffdf\033\uffdf\034\uffdf\057\uffdf\001\002\000\006\004" +
    "\142\036\143\001\002\000\004\023\134\001\002\000\020" +
    "\023\064\032\056\040\055\041\062\055\060\056\061\057" +
    "\013\001\002\000\004\055\133\001\002\000\006\031\125" +
    "\057\013\001\002\000\032\004\uffe9\005\uffe9\017\uffe9\020" +
    "\uffe9\024\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\042\uffe9" +
    "\043\uffe9\044\uffe9\001\002\000\032\004\ufff4\005\ufff4\017" +
    "\ufff4\020\ufff4\024\ufff4\035\ufff4\036\ufff4\037\ufff4\040\ufff4" +
    "\042\ufff4\043\ufff4\044\ufff4\001\002\000\032\004\ufff3\005" +
    "\ufff3\017\ufff3\020\ufff3\024\ufff3\035\ufff3\036\ufff3\037\ufff3" +
    "\040\ufff3\042\ufff3\043\ufff3\044\ufff3\001\002\000\020\023" +
    "\064\032\056\040\055\041\062\055\060\056\061\057\013" +
    "\001\002\000\024\004\076\017\071\020\121\035\067\036" +
    "\072\037\073\040\066\042\070\043\075\001\002\000\020" +
    "\023\064\032\056\040\055\041\062\055\060\056\061\057" +
    "\013\001\002\000\024\004\076\017\071\024\074\035\067" +
    "\036\072\037\073\040\066\042\070\043\075\001\002\000" +
    "\020\023\064\032\056\040\055\041\062\055\060\056\061" +
    "\057\013\001\002\000\020\023\064\032\056\040\055\041" +
    "\062\055\060\056\061\057\013\001\002\000\020\023\064" +
    "\032\056\040\055\041\062\055\060\056\061\057\013\001" +
    "\002\000\006\054\105\057\013\001\002\000\004\036\103" +
    "\001\002\000\020\023\064\032\056\040\055\041\062\055" +
    "\060\056\061\057\013\001\002\000\032\004\ufff2\005\ufff2" +
    "\017\ufff2\020\ufff2\024\ufff2\035\ufff2\036\ufff2\037\ufff2\040" +
    "\ufff2\042\ufff2\043\ufff2\044\ufff2\001\002\000\020\023\064" +
    "\032\056\040\055\041\062\055\060\056\061\057\013\001" +
    "\002\000\020\023\064\032\056\040\055\041\062\055\060" +
    "\056\061\057\013\001\002\000\024\004\076\005\100\017" +
    "\071\035\067\036\072\037\073\040\066\042\070\043\075" +
    "\001\002\000\032\004\uffe4\005\uffe4\017\uffe4\020\uffe4\024" +
    "\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\042\uffe4\043\uffe4" +
    "\044\uffe4\001\002\000\032\004\076\005\uffec\017\071\020" +
    "\uffec\024\uffec\035\uffec\036\uffec\037\uffec\040\uffec\042\uffec" +
    "\043\uffec\044\uffec\001\002\000\032\004\076\005\uffef\017" +
    "\071\020\uffef\024\uffef\035\uffef\036\uffef\037\uffef\040\066" +
    "\042\070\043\075\044\uffef\001\002\000\020\023\064\032" +
    "\056\040\055\041\062\055\060\056\061\057\013\001\002" +
    "\000\032\004\076\005\ufff0\017\071\020\ufff0\024\ufff0\035" +
    "\067\036\072\037\073\040\066\042\070\043\075\044\ufff0" +
    "\001\002\000\032\004\uffe6\005\uffe6\017\uffe6\020\uffe6\024" +
    "\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\042\uffe6\043\uffe6" +
    "\044\uffe6\001\002\000\004\023\107\001\002\000\022\023" +
    "\064\024\uffd5\032\056\040\055\041\062\055\060\056\061" +
    "\057\013\001\002\000\006\024\uffd4\044\114\001\002\000" +
    "\004\024\113\001\002\000\026\004\076\017\071\024\uffd3" +
    "\035\067\036\072\037\073\040\066\042\070\043\075\044" +
    "\uffd3\001\002\000\032\004\uffea\005\uffea\017\uffea\020\uffea" +
    "\024\uffea\035\uffea\036\uffea\037\uffea\040\uffea\042\uffea\043" +
    "\uffea\044\uffea\001\002\000\020\023\064\032\056\040\055" +
    "\041\062\055\060\056\061\057\013\001\002\000\026\004" +
    "\076\017\071\024\uffd2\035\067\036\072\037\073\040\066" +
    "\042\070\043\075\044\uffd2\001\002\000\032\004\076\005" +
    "\uffee\017\071\020\uffee\024\uffee\035\uffee\036\uffee\037\uffee" +
    "\040\uffee\042\uffee\043\075\044\uffee\001\002\000\032\004" +
    "\076\005\ufff1\017\071\020\ufff1\024\ufff1\035\ufff1\036\ufff1" +
    "\037\073\040\066\042\070\043\075\044\ufff1\001\002\000" +
    "\032\004\076\005\uffed\017\071\020\uffed\024\uffed\035\uffed" +
    "\036\uffed\037\uffed\040\uffed\042\uffed\043\075\044\uffed\001" +
    "\002\000\004\022\122\001\002\000\014\012\uffda\022\uffda" +
    "\025\uffda\031\uffda\057\uffda\001\002\000\032\004\076\005" +
    "\uffeb\017\071\020\uffeb\024\uffeb\035\uffeb\036\uffeb\037\uffeb" +
    "\040\uffeb\042\uffeb\043\uffeb\044\uffeb\001\002\000\004\023" +
    "\131\001\002\000\004\004\126\001\002\000\020\023\064" +
    "\032\056\040\055\041\062\055\060\056\061\057\013\001" +
    "\002\000\024\004\076\005\130\017\071\035\067\036\072" +
    "\037\073\040\066\042\070\043\075\001\002\000\032\004" +
    "\uffe5\005\uffe5\017\uffe5\020\uffe5\024\uffe5\035\uffe5\036\uffe5" +
    "\037\uffe5\040\uffe5\042\uffe5\043\uffe5\044\uffe5\001\002\000" +
    "\004\024\132\001\002\000\032\004\uffe8\005\uffe8\017\uffe8" +
    "\020\uffe8\024\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\042" +
    "\uffe8\043\uffe8\044\uffe8\001\002\000\032\004\uffe7\005\uffe7" +
    "\017\uffe7\020\uffe7\024\uffe7\035\uffe7\036\uffe7\037\uffe7\040" +
    "\uffe7\042\uffe7\043\uffe7\044\uffe7\001\002\000\020\023\064" +
    "\032\056\040\055\041\062\055\060\056\061\057\013\001" +
    "\002\000\024\004\076\017\071\024\136\035\067\036\072" +
    "\037\073\040\066\042\070\043\075\001\002\000\014\015" +
    "\044\021\046\030\053\034\045\057\013\001\002\000\004" +
    "\026\140\001\002\000\014\015\044\021\046\030\053\034" +
    "\045\057\013\001\002\000\026\015\ufff8\021\ufff8\022\ufff8" +
    "\025\ufff8\026\ufff8\030\ufff8\031\ufff8\033\ufff8\034\ufff8\057" +
    "\ufff8\001\002\000\020\023\064\032\056\040\055\041\062" +
    "\055\060\056\061\057\013\001\002\000\020\023\064\032" +
    "\056\040\055\041\062\055\060\056\061\057\013\001\002" +
    "\000\024\004\076\017\071\020\145\035\067\036\072\037" +
    "\073\040\066\042\070\043\075\001\002\000\026\015\ufffa" +
    "\021\ufffa\022\ufffa\025\ufffa\026\ufffa\030\ufffa\031\ufffa\033" +
    "\ufffa\034\ufffa\057\ufffa\001\002\000\024\004\076\005\147" +
    "\017\071\035\067\036\072\037\073\040\066\042\070\043" +
    "\075\001\002\000\004\036\150\001\002\000\020\023\064" +
    "\032\056\040\055\041\062\055\060\056\061\057\013\001" +
    "\002\000\024\004\076\017\071\020\152\035\067\036\072" +
    "\037\073\040\066\042\070\043\075\001\002\000\026\015" +
    "\ufff6\021\ufff6\022\ufff6\025\ufff6\026\ufff6\030\ufff6\031\ufff6" +
    "\033\ufff6\034\ufff6\057\ufff6\001\002\000\022\015\044\021" +
    "\046\022\154\025\025\030\053\031\027\034\045\057\047" +
    "\001\002\000\026\015\ufff9\021\ufff9\022\ufff9\025\ufff9\026" +
    "\ufff9\030\ufff9\031\ufff9\033\ufff9\034\ufff9\057\ufff9\001\002" +
    "\000\020\023\064\032\056\040\055\041\062\055\060\056" +
    "\061\057\013\001\002\000\024\004\076\017\071\024\157" +
    "\035\067\036\072\037\073\040\066\042\070\043\075\001" +
    "\002\000\014\015\044\021\046\030\053\034\045\057\013" +
    "\001\002\000\026\015\ufff7\021\ufff7\022\ufff7\025\ufff7\026" +
    "\ufff7\030\ufff7\031\ufff7\033\ufff7\034\ufff7\057\ufff7\001\002" +
    "\000\004\010\162\001\002\000\004\017\163\001\002\000" +
    "\004\011\164\001\002\000\004\023\165\001\002\000\020" +
    "\023\064\032\056\040\055\041\062\055\060\056\061\057" +
    "\013\001\002\000\024\004\076\017\071\024\167\035\067" +
    "\036\072\037\073\040\066\042\070\043\075\001\002\000" +
    "\004\020\170\001\002\000\026\015\ufffb\021\ufffb\022\ufffb" +
    "\025\ufffb\026\ufffb\030\ufffb\031\ufffb\033\ufffb\034\ufffb\057" +
    "\ufffb\001\002\000\006\024\uffd1\044\uffd1\001\002\000\010" +
    "\025\025\031\027\057\023\001\002\000\006\024\uffcd\044" +
    "\uffcd\001\002\000\004\020\175\001\002\000\026\012\uffdb" +
    "\015\uffdb\021\uffdb\022\uffdb\025\uffdb\030\uffdb\031\uffdb\033" +
    "\uffdb\034\uffdb\057\uffdb\001\002\000\004\021\uffe2\001\002" +
    "\000\004\021\200\001\002\000\004\012\201\001\002\000" +
    "\004\013\202\001\002\000\004\016\203\001\002\000\004" +
    "\007\204\001\002\000\004\023\205\001\002\000\004\014" +
    "\206\001\002\000\004\004\207\001\002\000\004\005\210" +
    "\001\002\000\004\057\013\001\002\000\004\024\212\001" +
    "\002\000\004\021\213\001\002\000\014\015\044\021\046" +
    "\030\053\034\045\057\013\001\002\000\004\022\215\001" +
    "\002\000\004\022\216\001\002\000\006\002\uffff\006\uffff" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\215\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\004\004\176\001\001\000\004\005\006\001\001" +
    "\000\004\006\007\001\001\000\002\001\001\000\004\004" +
    "\011\001\001\000\004\007\014\001\001\000\002\001\001" +
    "\000\004\004\175\001\001\000\002\001\001\000\004\010" +
    "\016\001\001\000\010\011\025\013\020\014\017\001\001" +
    "\000\002\001\001\000\004\004\173\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\032\001\001\000\002" +
    "\001\001\000\012\013\035\015\036\016\037\017\034\001" +
    "\001\000\002\001\001\000\004\004\170\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\042\001\001\000\012\004\051\013\020\014\050\022\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\152\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\056\023\062\001\001\000\002\001\001\000\004\004\123" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\056\023\122\001\001\000\002\001\001" +
    "\000\006\004\056\023\064\001\001\000\002\001\001\000" +
    "\006\004\056\023\117\001\001\000\006\004\056\023\116" +
    "\001\001\000\006\004\056\023\115\001\001\000\004\004" +
    "\105\001\001\000\002\001\001\000\006\004\056\023\101" +
    "\001\001\000\002\001\001\000\006\004\056\023\100\001" +
    "\001\000\006\004\056\023\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\056\023\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\056\020\110\021" +
    "\107\023\111\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\056\023" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\056\023\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\056\023\134\001\001\000\002\001" +
    "\001\000\006\004\051\022\136\001\001\000\002\001\001" +
    "\000\006\004\051\022\140\001\001\000\002\001\001\000" +
    "\006\004\056\023\145\001\001\000\006\004\056\023\143" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\056\023\150\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\051\013" +
    "\020\014\050\022\047\001\001\000\002\001\001\000\006" +
    "\004\056\023\155\001\001\000\002\001\001\000\006\004" +
    "\051\022\157\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\056\023\165\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\035\015\172\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\210\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\051\022\213\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser_constructor$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser_constructor$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser_constructor$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser_constructor$actions {



  private final parser_constructor parser;

  /** Constructor */
  CUP$parser_constructor$actions(parser_constructor parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser_constructor$do_action_part00000000(
    int                        CUP$parser_constructor$act_num,
    java_cup.runtime.lr_parser CUP$parser_constructor$parser,
    java.util.Stack            CUP$parser_constructor$stack,
    int                        CUP$parser_constructor$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser_constructor$result;

      /* select the action based on the action number */
      switch (CUP$parser_constructor$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // axiom ::= klassMain klassList 
            {
              Axiom RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).xright;
		KlassMain a = (KlassMain)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xright;
		AstList<Klass> l = (AstList<Klass>)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.peek()).value;
		 RESULT = Axiom.create(a, l);
                   RESULT.addPosition(axleft, lxright); 
              CUP$parser_constructor$result = parser.getSymbolFactory().newSymbol("axiom",0, ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)), ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), RESULT);
            }
          return CUP$parser_constructor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= axiom EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).xright;
		Axiom start_val = (Axiom)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).value;
		RESULT = start_val;
              CUP$parser_constructor$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)), ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser_constructor$parser.done_parsing();
          return CUP$parser_constructor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // klassMain ::= CLASS ident LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACK RBRACK ident RPAREN LBRACE stmt RBRACE RBRACE 
            {
              KlassMain RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-16)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-16)).xright;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-16)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-15)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-15)).xright;
		Ident b = (Ident)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-15)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-5)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-5)).xright;
		Ident c = (Ident)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-5)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)).xright;
		Stmt d = (Stmt)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xright;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.peek()).value;
		 RESULT = KlassMain.create(b, c, d);
                   RESULT.addPosition(axleft, zxright); 
              CUP$parser_constructor$result = parser.getSymbolFactory().newSymbol("klassMain",1, ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-16)), ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), RESULT);
            }
          return CUP$parser_constructor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // klassList ::= 
            {
              AstList<Klass> RESULT =null;
		 RESULT= new AstList<Klass>(); 
              CUP$parser_constructor$result = parser.getSymbolFactory().newSymbol("klassList",3, ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), RESULT);
            }
          return CUP$parser_constructor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // klassList ::= klassList klass 
            {
              AstList<Klass> RESULT =null;
		Location klxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).xleft;
		Location klxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).xright;
		AstList<Klass> kl = (AstList<Klass>)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).value;
		Location kxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xleft;
		Location kxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xright;
		Klass k = (Klass)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.peek()).value;
		 RESULT = kl;
                                      RESULT.add(k);
                                      RESULT.addPosition(klxleft,kxright); 
              CUP$parser_constructor$result = parser.getSymbolFactory().newSymbol("klassList",3, ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)), ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), RESULT);
            }
          return CUP$parser_constructor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ident ::= IDENT 
            {
              Ident RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xright;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.peek()).value;
		 RESULT = Ident.create(a);
                   RESULT.addPosition(axleft, axright); 
              CUP$parser_constructor$result = parser.getSymbolFactory().newSymbol("ident",2, ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), RESULT);
            }
          return CUP$parser_constructor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= SYSTEM DOT OUT DOT PRINTLN LPAREN expr RPAREN SEMI 
            {
              Stmt RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-8)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-8)).xright;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-8)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)).xright;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xright;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.peek()).value;
		 RESULT = StmtPrint.create(b);
                   RESULT.addPosition(axleft, zxright); 
              CUP$parser_constructor$result = parser.getSymbolFactory().newSymbol("stmt",16, ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-8)), ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), RESULT);
            }
          return CUP$parser_constructor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= ident ASSIGN expr SEMI 
            {
              Stmt RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-3)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-3)).xright;
		Ident i = (Ident)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xright;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.peek()).value;
		 RESULT = StmtAssign.create(i,e);
                  RESULT.addPosition(ixleft, zxright); 
              CUP$parser_constructor$result = parser.getSymbolFactory().newSymbol("stmt",16, ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-3)), ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), RESULT);
            }
          return CUP$parser_constructor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= LBRACE methodBody RBRACE 
            {
              Stmt RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)).xright;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)).value;
		Location mbxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).xleft;
		Location mbxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).xright;
		MethodBody mb = (MethodBody)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xright;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.peek()).value;
		 RESULT = StmtBlock.create(mb.vars(), mb.instructions());
                   RESULT.addPosition(axleft, zxright); 
              CUP$parser_constructor$result = parser.getSymbolFactory().newSymbol("stmt",16, ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)), ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), RESULT);
            }
          return CUP$parser_constructor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= IF LPAREN expr RPAREN stmt ELSE stmt 
            {
              Stmt RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-6)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-6)).xright;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-6)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-4)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-4)).xright;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-4)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)).xright;
		Stmt c = (Stmt)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xright;
		Stmt z = (Stmt)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.peek()).value;
		 RESULT = StmtIf.create(b, c, z);
                   RESULT.addPosition(axleft, zxright); 
              CUP$parser_constructor$result = parser.getSymbolFactory().newSymbol("stmt",16, ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-6)), ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), RESULT);
            }
          return CUP$parser_constructor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= WHILE LPAREN expr RPAREN stmt 
            {
              Stmt RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-4)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-4)).xright;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-4)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)).xright;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xright;
		Stmt z = (Stmt)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.peek()).value;
		 RESULT = StmtWhile.create(b, z);
                   RESULT.addPosition(axleft, zxright); 
              CUP$parser_constructor$result = parser.getSymbolFactory().newSymbol("stmt",16, ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-4)), ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), RESULT);
            }
          return CUP$parser_constructor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= ident LBRACK expr RBRACK ASSIGN expr SEMI 
            {
              Stmt RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-6)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-6)).xright;
		Ident a = (Ident)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-6)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-4)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-4)).xright;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-4)).value;
		Location jxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).xleft;
		Location jxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).xright;
		Expr j = (Expr)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xright;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.peek()).value;
		 RESULT = StmtArrayAssign.create(a, i, j);
                   RESULT.addPosition(axleft, zxright); 
              CUP$parser_constructor$result = parser.getSymbolFactory().newSymbol("stmt",16, ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-6)), ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), RESULT);
            }
          return CUP$parser_constructor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // klass ::= CLASS ident parent LBRACE klassBody RBRACE 
            {
              Klass RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-5)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-5)).xright;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-5)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-4)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-4)).xright;
		Ident i = (Ident)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-4)).value;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-3)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-3)).xright;
		Ident p = (Ident)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-3)).value;
		Location kbxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).xleft;
		Location kbxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).xright;
		KlassBody kb = (KlassBody)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xright;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.peek()).value;
		 RESULT=Klass.create(i, p, kb.attributs(), kb.methodes());
                                             RESULT.addPosition(axleft,zxright); 
              CUP$parser_constructor$result = parser.getSymbolFactory().newSymbol("klass",4, ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-5)), ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), RESULT);
            }
          return CUP$parser_constructor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= LIT_INT 
            {
              Expr RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xright;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.peek()).value;
		 RESULT = ExprLiteralInt.create(a);
                   RESULT.addPosition(axleft, axright); 
              CUP$parser_constructor$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), RESULT);
            }
          return CUP$parser_constructor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= LIT_BOOL 
            {
              Expr RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xright;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.peek()).value;
		 RESULT = ExprLiteralBool.create(a);
                   RESULT.addPosition(axleft, axright); 
              CUP$parser_constructor$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), RESULT);
            }
          return CUP$parser_constructor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)).xright;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).xright;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xright;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.peek()).value;
		 RESULT = b;
                   RESULT.addPosition(axleft, zxright); 
              CUP$parser_constructor$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)), ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), RESULT);
            }
          return CUP$parser_constructor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= expr AND expr 
            {
              Expr RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)).xright;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xright;
		Expr z = (Expr)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.peek()).value;
		 RESULT = ExprOpBin.create(a, compil.EnumOper.AND, z);
                   RESULT.addPosition(axleft, zxright); 
              CUP$parser_constructor$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)), ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), RESULT);
            }
          return CUP$parser_constructor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= expr ASSIGN ASSIGN expr 
            {
              Expr RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-3)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-3)).xright;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-3)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xright;
		Expr z = (Expr)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.peek()).value;
		 RESULT = ExprOpBin.create(a, compil.EnumOper.EQUAL, z);
                   RESULT.addPosition(axleft, zxright); 
              CUP$parser_constructor$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-3)), ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), RESULT);
            }
          return CUP$parser_constructor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= expr LESS expr 
            {
              Expr RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)).xright;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xright;
		Expr z = (Expr)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.peek()).value;
		 RESULT = ExprOpBin.create(a, compil.EnumOper.LESS, z);
                   RESULT.addPosition(axleft, zxright); 
              CUP$parser_constructor$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)), ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), RESULT);
            }
          return CUP$parser_constructor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= expr PLUS expr 
            {
              Expr RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)).xright;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xright;
		Expr z = (Expr)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.peek()).value;
		 RESULT = ExprOpBin.create(a, compil.EnumOper.PLUS, z);
                   RESULT.addPosition(axleft, zxright); 
              CUP$parser_constructor$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)), ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), RESULT);
            }
          return CUP$parser_constructor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= expr MINUS expr 
            {
              Expr RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)).xright;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xright;
		Expr z = (Expr)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.peek()).value;
		 RESULT = ExprOpBin.create(a, compil.EnumOper.MINUS, z);
                   RESULT.addPosition(axleft, zxright); 
              CUP$parser_constructor$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)), ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), RESULT);
            }
          return CUP$parser_constructor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= expr TIMES expr 
            {
              Expr RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)).xright;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xright;
		Expr z = (Expr)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.peek()).value;
		 RESULT = ExprOpBin.create(a, compil.EnumOper.TIMES, z);
                   RESULT.addPosition(axleft, zxright); 
              CUP$parser_constructor$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)), ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), RESULT);
            }
          return CUP$parser_constructor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= NOT expr 
            {
              Expr RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).xright;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xright;
		Expr z = (Expr)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.peek()).value;
		 RESULT = ExprOpUn.create(compil.EnumOper.NOT, z);
                   RESULT.addPosition(axleft, zxright); 
              CUP$parser_constructor$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)), ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), RESULT);
            }
          return CUP$parser_constructor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= expr DOT ident LPAREN args RPAREN 
            {
              Expr RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-5)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-5)).xright;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-5)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-3)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-3)).xright;
		Ident b = (Ident)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-3)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).xright;
		AstList<Expr> c = (AstList<Expr>)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xright;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.peek()).value;
		 RESULT = ExprCall.create(a, b, c);
                   RESULT.addPosition(axleft, zxright); 
              CUP$parser_constructor$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-5)), ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), RESULT);
            }
          return CUP$parser_constructor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= ident 
            {
              Expr RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xright;
		Ident a = (Ident)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.peek()).value;
		 RESULT = ExprIdent.create(a);
                   RESULT.addPosition(axleft, axright); 
              CUP$parser_constructor$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), RESULT);
            }
          return CUP$parser_constructor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= NEW ident LPAREN RPAREN 
            {
              Expr RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-3)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-3)).xright;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-3)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)).xright;
		Ident b = (Ident)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xright;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.peek()).value;
		 RESULT = ExprNew.create(b);
                   RESULT.addPosition(axleft, zxright); 
              CUP$parser_constructor$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-3)), ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), RESULT);
            }
          return CUP$parser_constructor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= MINUS LIT_INT 
            {
              Expr RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xright;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.peek()).value;
		 RESULT = ExprLiteralInt.create(- a);
                   RESULT.addPosition(axleft, axright); 
              CUP$parser_constructor$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)), ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), RESULT);
            }
          return CUP$parser_constructor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= expr DOT LENGTH 
            {
              Expr RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)).xright;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xright;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.peek()).value;
		 RESULT = ExprArrayLength.create(a);
                   RESULT.addPosition(axleft, zxright); 
              CUP$parser_constructor$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)), ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), RESULT);
            }
          return CUP$parser_constructor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= NEW INT LBRACK expr RBRACK 
            {
              Expr RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-4)).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-4)).xright;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-4)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xright;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.peek()).value;
		 RESULT = ExprArrayNew.create(e, compil.EnumType.INT);
                     RESULT.addPosition(nxleft, zxright); 
              CUP$parser_constructor$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-4)), ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), RESULT);
            }
          return CUP$parser_constructor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= expr LBRACK expr RBRACK 
            {
              Expr RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-3)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-3)).xright;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xright;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.peek()).value;
		 RESULT = ExprArrayLookup.create(a, e);
                   RESULT.addPosition(axleft, zxright); 
              CUP$parser_constructor$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-3)), ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), RESULT);
            }
          return CUP$parser_constructor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parent ::= 
            {
              Ident RESULT =null;
		 RESULT = Ident.create("Object");        
              CUP$parser_constructor$result = parser.getSymbolFactory().newSymbol("parent",5, ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), RESULT);
            }
          return CUP$parser_constructor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parent ::= EXTENDS ident 
            {
              Ident RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).xright;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xright;
		Ident z = (Ident)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.peek()).value;
		 RESULT = z;
                   RESULT.addPosition(axleft, zxright); 
              CUP$parser_constructor$result = parser.getSymbolFactory().newSymbol("parent",5, ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)), ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), RESULT);
            }
          return CUP$parser_constructor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // methodBody ::= 
            {
              MethodBody RESULT =null;
		 RESULT = MethodBody.create(); 
              CUP$parser_constructor$result = parser.getSymbolFactory().newSymbol("methodBody",8, ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), RESULT);
            }
          return CUP$parser_constructor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // methodBody ::= methodBody stmt 
            {
              MethodBody RESULT =null;
		Location mbxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).xleft;
		Location mbxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).xright;
		MethodBody mb = (MethodBody)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).value;
		Location stxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xleft;
		Location stxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xright;
		Stmt st = (Stmt)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.peek()).value;
		 RESULT=mb;
                        mb.instructions().add(st);
                        RESULT.addPosition(mbxleft, stxright); 
              CUP$parser_constructor$result = parser.getSymbolFactory().newSymbol("methodBody",8, ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)), ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), RESULT);
            }
          return CUP$parser_constructor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // methodBody ::= methodBody variable 
            {
              MethodBody RESULT =null;
		Location mbxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).xleft;
		Location mbxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).xright;
		MethodBody mb = (MethodBody)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).value;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xright;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.peek()).value;
		 RESULT=mb;
                        mb.vars().add(v);
                        RESULT.addPosition(mbxleft, vxright); 
              CUP$parser_constructor$result = parser.getSymbolFactory().newSymbol("methodBody",8, ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)), ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), RESULT);
            }
          return CUP$parser_constructor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // klassBody ::= 
            {
              KlassBody RESULT =null;
		 RESULT = KlassBody.create(); 
              CUP$parser_constructor$result = parser.getSymbolFactory().newSymbol("klassBody",6, ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), RESULT);
            }
          return CUP$parser_constructor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // klassBody ::= klassBody variable 
            {
              KlassBody RESULT =null;
		Location kbxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).xleft;
		Location kbxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).xright;
		KlassBody kb = (KlassBody)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).value;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xright;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.peek()).value;
		 RESULT = kb;
                        RESULT.attributs().add(v); 
                        RESULT.addPosition(kbxleft, vxright); 
              CUP$parser_constructor$result = parser.getSymbolFactory().newSymbol("klassBody",6, ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)), ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), RESULT);
            }
          return CUP$parser_constructor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // klassBody ::= klassBody method 
            {
              KlassBody RESULT =null;
		Location kbxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).xleft;
		Location kbxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).xright;
		KlassBody kb = (KlassBody)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).value;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xright;
		Method m = (Method)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.peek()).value;
		 RESULT = kb;
                        RESULT.methodes().add(m);
                        RESULT.addPosition(kbxleft, mxright); 
              CUP$parser_constructor$result = parser.getSymbolFactory().newSymbol("klassBody",6, ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)), ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), RESULT);
            }
          return CUP$parser_constructor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // variable ::= type ident SEMI 
            {
              Variable RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)).xright;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).xright;
		Ident i = (Ident)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xright;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.peek()).value;
		 RESULT = Variable.create(t, i);
                     RESULT.addPosition(txleft, zxright); 
              CUP$parser_constructor$result = parser.getSymbolFactory().newSymbol("variable",10, ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)), ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), RESULT);
            }
          return CUP$parser_constructor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // method ::= PUBLIC type ident LPAREN formals RPAREN LBRACE methodBody RETURN expr SEMI RBRACE 
            {
              Method RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-11)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-11)).xright;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-11)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-10)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-10)).xright;
		Type b = (Type)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-10)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-9)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-9)).xright;
		Ident c = (Ident)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-9)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-7)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-7)).xright;
		AstList<Formal> d = (AstList<Formal>)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-7)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-4)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-4)).xright;
		MethodBody e = (MethodBody)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-4)).value;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)).xright;
		Expr f = (Expr)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xright;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.peek()).value;
		 RESULT = Method.create(b, c, d, e.vars(), e.instructions(), f);
                   RESULT.addPosition(axleft, zxright); 
              CUP$parser_constructor$result = parser.getSymbolFactory().newSymbol("method",7, ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-11)), ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), RESULT);
            }
          return CUP$parser_constructor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // type ::= IDENT 
            {
              Type RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xright;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.peek()).value;
		 RESULT = Type.create(a);
                   RESULT.addPosition(axleft, axright); 
              CUP$parser_constructor$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), RESULT);
            }
          return CUP$parser_constructor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // type ::= INT 
            {
              Type RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xright;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.peek()).value;
		 RESULT = Type.create(compil.EnumType.INT);
                   RESULT.addPosition(axleft, axright); 
              CUP$parser_constructor$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), RESULT);
            }
          return CUP$parser_constructor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // type ::= BOOLEAN 
            {
              Type RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xright;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.peek()).value;
		 RESULT = Type.create(compil.EnumType.BOOL);
                   RESULT.addPosition(axleft, axright); 
              CUP$parser_constructor$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), RESULT);
            }
          return CUP$parser_constructor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // type ::= INT LBRACK RBRACK 
            {
              Type RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)).xright;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xright;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.peek()).value;
		 RESULT = Type.create(compil.EnumType.INT_ARRAY);
                   RESULT.addPosition(txleft, zxright); 
              CUP$parser_constructor$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)), ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), RESULT);
            }
          return CUP$parser_constructor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // args ::= 
            {
              AstList<Expr> RESULT =null;
		 RESULT = new AstList<>(); 
              CUP$parser_constructor$result = parser.getSymbolFactory().newSymbol("args",14, ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), RESULT);
            }
          return CUP$parser_constructor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // args ::= args1 
            {
              AstList<Expr> RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xright;
		AstList<Expr> a = (AstList<Expr>)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.peek()).value;
		 RESULT = a;
                   RESULT.addPosition(axleft, axright); 
              CUP$parser_constructor$result = parser.getSymbolFactory().newSymbol("args",14, ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), RESULT);
            }
          return CUP$parser_constructor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // args1 ::= expr 
            {
              AstList<Expr> RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xright;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.peek()).value;
		 RESULT = new AstList<>(); RESULT.add(a);
                   RESULT.addPosition(axleft, axright); 
              CUP$parser_constructor$result = parser.getSymbolFactory().newSymbol("args1",15, ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), RESULT);
            }
          return CUP$parser_constructor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // args1 ::= args1 COMMA expr 
            {
              AstList<Expr> RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)).xright;
		AstList<Expr> a = (AstList<Expr>)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xright;
		Expr z = (Expr)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.peek()).value;
		 RESULT = a; RESULT.add(z);
                   RESULT.addPosition(axleft, zxright); 
              CUP$parser_constructor$result = parser.getSymbolFactory().newSymbol("args1",15, ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)), ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), RESULT);
            }
          return CUP$parser_constructor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // formal ::= type ident 
            {
              Formal RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).xright;
		Type a = (Type)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xright;
		Ident z = (Ident)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.peek()).value;
		 RESULT = Formal.create(a, z);
                   RESULT.addPosition(axleft, zxright); 
              CUP$parser_constructor$result = parser.getSymbolFactory().newSymbol("formal",11, ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-1)), ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), RESULT);
            }
          return CUP$parser_constructor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // formals ::= 
            {
              AstList<Formal> RESULT =null;
		 RESULT = new AstList<>(); 
              CUP$parser_constructor$result = parser.getSymbolFactory().newSymbol("formals",12, ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), RESULT);
            }
          return CUP$parser_constructor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // formals ::= formals1 
            {
              AstList<Formal> RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xright;
		AstList<Formal> a = (AstList<Formal>)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.peek()).value;
		 RESULT = a;
                   RESULT.addPosition(axleft, axright); 
              CUP$parser_constructor$result = parser.getSymbolFactory().newSymbol("formals",12, ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), RESULT);
            }
          return CUP$parser_constructor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // formals1 ::= formal 
            {
              AstList<Formal> RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xright;
		Formal a = (Formal)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.peek()).value;
		 RESULT = new AstList<>(); RESULT.add(a);
                   RESULT.addPosition(axleft, axright); 
              CUP$parser_constructor$result = parser.getSymbolFactory().newSymbol("formals1",13, ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), RESULT);
            }
          return CUP$parser_constructor$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // formals1 ::= formals1 COMMA formal 
            {
              AstList<Formal> RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)).xright;
		AstList<Formal> a = (AstList<Formal>)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)).value;
		Location zxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xleft;
		Location zxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser_constructor$stack.peek()).xright;
		Formal z = (Formal)((java_cup.runtime.Symbol) CUP$parser_constructor$stack.peek()).value;
		 RESULT = a; RESULT.add(z);
                   RESULT.addPosition(axleft, zxright); 
              CUP$parser_constructor$result = parser.getSymbolFactory().newSymbol("formals1",13, ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.elementAt(CUP$parser_constructor$top-2)), ((java_cup.runtime.Symbol)CUP$parser_constructor$stack.peek()), RESULT);
            }
          return CUP$parser_constructor$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser_constructor$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser_constructor$do_action(
    int                        CUP$parser_constructor$act_num,
    java_cup.runtime.lr_parser CUP$parser_constructor$parser,
    java.util.Stack            CUP$parser_constructor$stack,
    int                        CUP$parser_constructor$top)
    throws java.lang.Exception
    {
              return CUP$parser_constructor$do_action_part00000000(
                               CUP$parser_constructor$act_num,
                               CUP$parser_constructor$parser,
                               CUP$parser_constructor$stack,
                               CUP$parser_constructor$top);
    }
}

}
